#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len;
    char buffer[BUFFER_SIZE];

    // Create UDP socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Bind the socket
    if (bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Binding failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);
    
    client_len = sizeof(client_addr);

    // Receive filename from client
    recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr*)&client_addr, &client_len);
    buffer[strcspn(buffer, "\n")] = 0; // Remove newline character

    printf("Client requested file: %s\n", buffer);

    // Open file and send contents
    FILE *file = fopen(buffer, "r");
    if (!file) {
        perror("File not found");
        sendto(sockfd, "ERROR: File not found", 22, 0, (struct sockaddr*)&client_addr, client_len);
    } else {
        while (fgets(buffer, BUFFER_SIZE, file)) {
            sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr*)&client_addr, client_len);
        }
        sendto(sockfd, "END", 3, 0, (struct sockaddr*)&client_addr, client_len); // Indicate end of transmission
        printf("File sent successfully.\n");
        fclose(file);
    }

    close(sockfd);
    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define SERVER_IP "127.0.0.1"
#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    socklen_t addr_len;
    char buffer[BUFFER_SIZE];

    // Create UDP socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = inet_addr(SERVER_IP);

    // Get filename from user
    printf("Enter filename to request: ");
    fgets(buffer, BUFFER_SIZE, stdin);
    buffer[strcspn(buffer, "\n")] = 0; // Remove newline character

    // Send filename to server
    sendto(sockfd, buffer, strlen(buffer), 0, (struct sockaddr*)&server_addr, sizeof(server_addr));

    printf("Waiting for file contents...\n");

    addr_len = sizeof(server_addr);
    while (1) {
        int bytes_received = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr*)&server_addr, &addr_len);
        if (bytes_received < 0) {
            perror("Error receiving file");
            break;
        }
        buffer[bytes_received] = '\0';

        if (strcmp(buffer, "END") == 0) {
            break;
        }

        printf("%s", buffer);
    }

    printf("\nFile transfer complete.\n");

    close(sockfd);
    return 0;
}
8.txt (UDP File Transfer)
Client Input:

bash
Copy
Enter filename: notes.txt  
Server Output:

bash
Copy
File sent successfully.  
Client Output:

bash
Copy
File contents:  
This is a secret message.  