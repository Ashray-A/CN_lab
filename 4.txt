#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};
    
    // Create socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
    
    // Set socket options
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    
    // Bind socket to port
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
   
    // Listen for connections
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }
    
    printf("Server listening on port %d...\n", PORT);
    
    // Accept incoming connection
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        perror("accept");
        exit(EXIT_FAILURE);
    }
    
    // Read filename from client
    read(new_socket, buffer, BUFFER_SIZE);
    printf("Requested file: %s\n", buffer);
    
    // Try to open the file
    FILE *file = fopen(buffer, "r");
    if (file == NULL) {
        char *error_msg = "File not found";
        send(new_socket, error_msg, strlen(error_msg), 0);
        printf("File not found\n");
    } else {
        // Read file contents and send to client
        char file_buffer[BUFFER_SIZE];
        size_t bytes_read;
        
        while ((bytes_read = fread(file_buffer, 1, BUFFER_SIZE, file)) > 0) {
            send(new_socket, file_buffer, bytes_read, 0);
        }
        
        fclose(file);
        printf("File sent successfully\n");
    }
    
    close(new_socket);
    close(server_fd);
    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define BUFFER_SIZE 1024

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char filename[BUFFER_SIZE] = {0};
    char buffer[BUFFER_SIZE] = {0};
    
    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\n Socket creation error \n");
        return -1;
    }
    
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);
    
    // Convert IPv4 address from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }
    
    // Connect to server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed \n");
        return -1;
    }
    
    printf("Enter filename: ");
    fgets(filename, BUFFER_SIZE, stdin);
    filename[strcspn(filename, "\n")] = 0; // Remove newline
    
    // Send filename to server
    send(sock, filename, strlen(filename), 0);
    printf("Request sent\n");
    
    // Receive file contents or error message
    printf("File contents:\n");
    while (1) {
        int valread = read(sock, buffer, BUFFER_SIZE - 1);
        if (valread <= 0) break;
        
        buffer[valread] = '\0';
        printf("%s", buffer);
    }
    printf("\n");
    
    close(sock);
    return 0;
}

 4.txt (TCP File Transfer)
Server Output:

bash
Copy
Requested file: data.txt  
File sent successfully  
Client Input/Output:

bash
Copy
Enter filename: data.txt  
File contents:  
Hello, this is sample data.  